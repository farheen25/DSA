// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class Main {
    public static void main(String[] args) {
        // List<Integer> list = new LinkedList<>();
        // list.add(1);
        // list.add(2);
        // list.add(3);
        // [1,2,3]
        // ListIterator<Integer> iterator = list.listIterator();
        // System.out.println(iterator.next());
        // System.out.println(iterator.next());
        // System.out.println(iterator.previous());
        
        //to convert arrayList to array
        // List<Integer> alist = new ArrayList<>();
        // alist.add(1);
        // alist.add(2);
        // alist.add(3);
        // [1,2,3]
        // Integer[] array = alist.toArray(new Integer[0]);
        // for( int x : array)
        // {
        //     System.out.println(x);
        // }
        // for deque use array deque and for queues use linkedList, for stacks use stack or can use deQueue as a stack also
        
        //FIFO 
        // Queue<Integer> q = new LinkedList<>();
        // q.offer(1); // offer means adding elements
        // q.offer(2);
        
        // System.out.println(q.peek()); //peek means get operation
        // System.out.println(q.poll()); //poll means remove
        // System.out.println(q.peek());
        // System.out.println(q.isEmpty());
        
        //LIFO
        // Stack<Integer> stack = new Stack<>();
        // stack.push(1);
        // stack.push(2);
        
        // while(!stack.isEmpty())
        // {
        //     System.out.println(stack.peek());
        //     stack.pop();
        // }
        
        // Use offerLast() + pollFirst() → FIFO
        // Use offerFirst() + pollFirst() → LIFO
        
        //deque with FIFO implementation
        // Deque<Integer> dq = new ArrayDeque<>();
        // dq.offerLast(1);
        // dq.offerLast(2);
        // System.out.println(dq);
        // System.out.println(dq.peekFirst());
        // System.out.println(dq.pollFirst());
        // System.out.println(dq.peekFirst());
        
        //doesn't maintain insertion orders
        // the elements are in min heap
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.offer(1);
        pq.offer(2);
        pq.offer(0);
        pq.offer(100);
        System.out.println(pq);
		
		Set when uniqueness is needed
		
		| Type            | Maintains Order?   | Sorted? | Notes                       |
| --------------- | ------------------ | ------- | --------------------------- |
| `HashSet`       | ❌ No order         | ❌ No    | Fast, common use            |
| `LinkedHashSet` | ✅ Insertion order  | ❌ No    | Keeps items in insert order |
| `TreeSet`       | ✅ Sorted (natural) | ✅ Yes   | Uses a `Tree`, slower       |

        | Method               | Description                         | Example                                |
| -------------------- | ----------------------------------- | -------------------------------------- |
| `add(E e)`           | Adds element if not already present | `set.add("A")`                         |
| `remove(Object o)`   | Removes element if present          | `set.remove("A")`                      |
| `contains(Object o)` | Checks if element exists            | `set.contains("A")`                    |
| `isEmpty()`          | Checks if set is empty              | `set.isEmpty()`                        |
| `size()`             | Returns number of elements          | `set.size()`                           |
| `clear()`            | Removes all elements                | `set.clear()`                          |
| `iterator()`         | Returns an iterator for the set     | `Iterator<String> it = set.iterator()` |


| Want...                      | Use...          |
| ---------------------------- | --------------- |
| Uniqueness, fast ops         | `HashSet`       |
| Uniqueness + insertion order | `LinkedHashSet` |
| Uniqueness + sorted order    | `TreeSet`       |


| Type            | Ordered?          | Nulls?         | Thread-Safe? | Sorting | Speed     |
| --------------- | ----------------- | -------------- | ------------ | ------- | --------- |
| `HashMap`       | ❌ No              | ✅ One null key | ❌ No         | ❌ No    | ✅ Fastest |
| `LinkedHashMap` | ✅ Insertion order | ✅ Yes          | ❌ No         | ❌ No    | ✅ Fast    |
| `Hashtable`     | ❌ No              | ❌ No           | ✅ Yes        | ❌ No    | ❌ Slower  |
| `TreeMap`       | ✅ Sorted          | ❌ No null key  | ❌ No         | ✅ Yes   | ⚠️ Slower |
| `NavigableMap`  | ✅ Sorted + Nav    | ❌ No null key  | ❌ No         | ✅ Yes   | ⚠️ Slower |

NavigableMap<Integer, String> map = new TreeMap<>();
map.put(10, "A");
map.put(20, "B");
map.put(30, "C");

System.out.println(map.lowerKey(25));    // 20 (just below)
System.out.println(map.higherKey(20));   // 30 (just above)
System.out.println(map.floorKey(20));    // 20 (equal or below)
System.out.println(map.ceilingKey(21));  // 30 (equal or above)

System.out.println(map.descendingMap()); // {30=C, 20=B, 10=A}

| **Collection**    | **Operation** | **Time Complexity**           | **Space Complexity** | **Notes**                                                                |                                                                                                   |
| ----------------- | ------------- | ----------------------------- | -------------------- | ------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------- |
| **ArrayList**     | `add`         | O(1) amortized                | O(n)                 | Appending at end; inserting elsewhere is O(n) due to shifting elements.  |                                                                                                   |
|                   | `remove`      | O(n)                          |                      | Shifting elements after removal.                                         |                                                                                                   |
|                   | `contains`    | O(n)                          |                      | Linear search.                                                           |                                                                                                   |
|                   | `get`         | O(1)                          |                      | Direct index access.                                                     |                                                                                                   |
| **LinkedList**    | `add`         | O(1) at ends                  | O(n)                 | Adding at head or tail is O(1); inserting elsewhere requires traversal.  |                                                                                                   |
|                   | `remove`      | O(n)                          |                      | Requires traversal to find the node.                                     |                                                                                                   |
|                   | `contains`    | O(n)                          |                      | Linear search.                                                           |                                                                                                   |
|                   | `get`         | O(n)                          |                      | Requires traversal.                                                      |                                                                                                   |
| **HashSet**       | `add`         | O(1) average, O(n) worst-case | O(n)                 | Backed by HashMap; worst-case due to hash collisions.                    |                                                                                                   |
|                   | `remove`      | O(1) average, O(n) worst-case |                      |                                                                          |                                                                                                   |
|                   | `contains`    | O(1) average, O(n) worst-case |                      |                                                                          |                                                                                                   |
| **LinkedHashSet** | `add`         | O(1) average                  | O(n)                 | Maintains insertion order.                                               |                                                                                                   |
|                   | `remove`      | O(1) average                  |                      |                                                                          |                                                                                                   |
|                   | `contains`    | O(1) average                  |                      |                                                                          |                                                                                                   |
| **TreeSet**       | `add`         | O(log n)                      | O(n)                 | Implemented as Red-Black tree.                                           |                                                                                                   |
|                   | `remove`      | O(log n)                      |                      |                                                                          |                                                                                                   |
|                   | `contains`    | O(log n)                      |                      |                                                                          |                                                                                                   |
| **HashMap**       | `put`         | O(1) average, O(n) worst-case | O(n)                 | Worst-case due to hash collisions.                                       |                                                                                                   |
|                   | `remove`      | O(1) average, O(n) worst-case |                      |                                                                          |                                                                                                   |
|                   | `containsKey` | O(1) average, O(n) worst-case |                      |                                                                          |                                                                                                   |
|                   | `get`         | O(1) average, O(n) worst-case |                      |                                                                          |                                                                                                   |
| **LinkedHashMap** | `put`         | O(1) average                  | O(n)                 | Maintains insertion order.                                               |                                                                                                   |
|                   | `remove`      | O(1) average                  |                      |                                                                          |                                                                                                   |
|                   | `containsKey` | O(1) average                  |                      |                                                                          |                                                                                                   |
|                   | `get`         | O(1) average                  |                      |                                                                          |                                                                                                   |
| **TreeMap**       | `put`         | O(log n)                      | O(n)                 | Implemented as Red-Black tree.                                           |                                                                                                   |
|                   | `remove`      | O(log n)                      |                      |                                                                          |                                                                                                   |
|                   | `containsKey` | O(log n)                      |                      |                                                                          |                                                                                                   |
|                   | `get`         | O(log n)                      |                      |                                                                          |                                                                                                   |
| **PriorityQueue** | `add`         | O(log n)                      | O(n)                 | Implemented as a binary heap.                                            |                                                                                                   |
|                   | `remove`      | O(n)                          |                      | Removing arbitrary elements is O(n); removing head is O(log n).          |                                                                                                   |
|                   | `contains`    | O(n)                          |                      | Linear search.                                                           |                                                                                                   |
|                   | `peek`        | O(1)                          |                      | Retrieves head without removal.                                          | ([CodingTechRoom][1], [Baeldung][2], [GeeksforGeeks][3], [GeeksforGeeks][4], [Stack Overflow][5]) |

[1]: https://codingtechroom.com/question/time-complexity-set-java?utm_source=chatgpt.com "What is the Time Complexity of Set Operations in Java?"
[2]: https://www.baeldung.com/java-collections-complexity?utm_source=chatgpt.com "Time Complexity of Java Collections - Baeldung"
[3]: https://www.geeksforgeeks.org/time-and-space-complexity-of-linked-list/?utm_source=chatgpt.com "Time and Space Complexity of Linked List - GeeksforGeeks"
[4]: https://www.geeksforgeeks.org/hashmap-containskey-method-in-java/?utm_source=chatgpt.com "HashMap containsKey() Method in Java - GeeksforGeeks"
[5]: https://stackoverflow.com/questions/2864204/treemap-search-time-complexity?utm_source=chatgpt.com "java - TreeMap - Search Time Complexity - Stack Overflow"


        
    }
}


